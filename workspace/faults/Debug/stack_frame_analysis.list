
stack_frame_analysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001480  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001784  08001784  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001784  08001784  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001784  08001784  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001784  08001784  00011784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001788  08001788  00011788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800178c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a19  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000389  00000000  00000000  00020aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00020e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  00020f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bfe  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001334  00000000  00000000  00023c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000942d  00000000  00000000  00024faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e3d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c20  00000000  00000000  0002e428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001618 	.word	0x08001618

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001618 	.word	0x08001618

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/*
 * Stack Frame Analysis
 */

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	/* Enable all configurable exceptions (i.e., UsageFault, MemManage, BusFault) */
	SHCSR |= USGFAULTENA;	/* Enable UsageFault */
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0x40>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <main+0x40>)
 800029c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002a0:	6013      	str	r3, [r2, #0]
	SHCSR |= BUSFAULTENA;	/* Enable BusFault */
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0x40>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <main+0x40>)
 80002a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ac:	6013      	str	r3, [r2, #0]
	SHCSR |= MEMFAULTENA;	/* Enable MemManage */
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <main+0x40>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <main+0x40>)
 80002b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b8:	6013      	str	r3, [r2, #0]

	/* Force the processor to execute some undefined instruction */
	uint32_t volatile *pSRAM = (uint32_t volatile *)0x20010000;	/* Random address within SRAM */
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0x44>)
 80002bc:	607b      	str	r3, [r7, #4]
	*pSRAM = 0xFFFFFFFF;	/* Undefined op-code */
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002c4:	601a      	str	r2, [r3, #0]

	void (*some_addr)(void);		/* Defining a function pointer */
	some_addr = (void *)0x20010001; /* Setting 'some_addr' to 0x20010001 but not 0x20010000
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <main+0x48>)
 80002c8:	603b      	str	r3, [r7, #0]
									   Hint: Any branch instruction that writes to PC (Program Counter)
									   only updates  bits 31:1 and forces '0' into the 0th bit.
									   This is how the system works  well.
									   You can check this by setting the bit[0] to 0 and
									   monitor the value of the UFSR! */
	some_addr();					/* Force jump to 0xFFFFFFFF (undefined instruction) */
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	4798      	blx	r3

	/* Analyze the faults */

    /* Loop forever */
	for(;;);
 80002ce:	e7fe      	b.n	80002ce <main+0x3e>
 80002d0:	e000ed24 	.word	0xe000ed24
 80002d4:	20010000 	.word	0x20010000
 80002d8:	20010001 	.word	0x20010001

080002dc <HardFault_Handler>:
}

/* HardFault handler */
void HardFault_Handler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80002e0:	4801      	ldr	r0, [pc, #4]	; (80002e8 <HardFault_Handler+0xc>)
 80002e2:	f000 fa23 	bl	800072c <puts>
	while (1);
 80002e6:	e7fe      	b.n	80002e6 <HardFault_Handler+0xa>
 80002e8:	08001630 	.word	0x08001630

080002ec <MemManage_Handler>:
}

/* MemManage handler */
void MemManage_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80002f0:	4801      	ldr	r0, [pc, #4]	; (80002f8 <MemManage_Handler+0xc>)
 80002f2:	f000 fa1b 	bl	800072c <puts>
	while (1);
 80002f6:	e7fe      	b.n	80002f6 <MemManage_Handler+0xa>
 80002f8:	08001630 	.word	0x08001630

080002fc <BusFault_Handler>:
}

/* BusFault handler */
void BusFault_Handler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

	printf("Exception: BusFault\n");
 8000300:	4801      	ldr	r0, [pc, #4]	; (8000308 <BusFault_Handler+0xc>)
 8000302:	f000 fa13 	bl	800072c <puts>
	while (1);
 8000306:	e7fe      	b.n	8000306 <BusFault_Handler+0xa>
 8000308:	08001648 	.word	0x08001648

0800030c <UsageFault_Handler>:
	 * Here we capture the value of MSP which happens to be the base address of the stack frame
	 * which got pushed onto stack automatically by the processor during the exception entry
	 * from Thread Mode to Handler Mode.
	 */

	__asm("mrs r0, msp");				/* Secure MSP and store it in r0. (According to AAPCS,
 800030c:	f3ef 8008 	mrs	r0, MSP
										   the value stored in r0 will be passed to the callee
										   as the first argument. Therefore, secured MSP value
										   will be passed to the first parameter of the
										   UsageFault_Handler_C '*pBaseStackFrame'. */
	__asm("b UsageFault_Handler_C");	/* Branch to UsageFault_Handler_C */
 8000310:	f000 b802 	b.w	8000318 <UsageFault_Handler_C>
}
 8000314:	bf00      	nop
	...

08000318 <UsageFault_Handler_C>:

/* UsageFault handler */
void UsageFault_Handler_C(uint32_t *pBaseStackFrame)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	printf("Exception: UsageFault\n");
 8000320:	4822      	ldr	r0, [pc, #136]	; (80003ac <UsageFault_Handler_C+0x94>)
 8000322:	f000 fa03 	bl	800072c <puts>
	printf("UFSR = %lx\n", UFSR & 0xFFFF);	/* Read 16 bits only */
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <UsageFault_Handler_C+0x98>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	4619      	mov	r1, r3
 800032e:	4821      	ldr	r0, [pc, #132]	; (80003b4 <UsageFault_Handler_C+0x9c>)
 8000330:	f000 f976 	bl	8000620 <iprintf>
	printf("MSP = %p\n", pBaseStackFrame);	/* print  */
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	4820      	ldr	r0, [pc, #128]	; (80003b8 <UsageFault_Handler_C+0xa0>)
 8000338:	f000 f972 	bl	8000620 <iprintf>

	/* Print stack frame (to troubleshoot any potential issues occurred when in Thread Mode) */
	printf("r0 	= %lx\n", pBaseStackFrame[0]);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4619      	mov	r1, r3
 8000342:	481e      	ldr	r0, [pc, #120]	; (80003bc <UsageFault_Handler_C+0xa4>)
 8000344:	f000 f96c 	bl	8000620 <iprintf>
	printf("r1 	= %lx\n", pBaseStackFrame[1]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3304      	adds	r3, #4
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4619      	mov	r1, r3
 8000350:	481b      	ldr	r0, [pc, #108]	; (80003c0 <UsageFault_Handler_C+0xa8>)
 8000352:	f000 f965 	bl	8000620 <iprintf>
	printf("r2 	= %lx\n", pBaseStackFrame[2]);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3308      	adds	r3, #8
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4819      	ldr	r0, [pc, #100]	; (80003c4 <UsageFault_Handler_C+0xac>)
 8000360:	f000 f95e 	bl	8000620 <iprintf>
	printf("r3 	= %lx\n", pBaseStackFrame[3]);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	330c      	adds	r3, #12
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4619      	mov	r1, r3
 800036c:	4816      	ldr	r0, [pc, #88]	; (80003c8 <UsageFault_Handler_C+0xb0>)
 800036e:	f000 f957 	bl	8000620 <iprintf>
	printf("r12 = %lx\n", pBaseStackFrame[4]);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3310      	adds	r3, #16
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4619      	mov	r1, r3
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <UsageFault_Handler_C+0xb4>)
 800037c:	f000 f950 	bl	8000620 <iprintf>
	printf("lr 	= %lx\n", pBaseStackFrame[5]);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3314      	adds	r3, #20
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4619      	mov	r1, r3
 8000388:	4811      	ldr	r0, [pc, #68]	; (80003d0 <UsageFault_Handler_C+0xb8>)
 800038a:	f000 f949 	bl	8000620 <iprintf>
	printf("pc 	= %lx\n", pBaseStackFrame[6]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3318      	adds	r3, #24
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	480f      	ldr	r0, [pc, #60]	; (80003d4 <UsageFault_Handler_C+0xbc>)
 8000398:	f000 f942 	bl	8000620 <iprintf>
	printf("xpsr = %lx\n", pBaseStackFrame[7]);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	331c      	adds	r3, #28
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <UsageFault_Handler_C+0xc0>)
 80003a6:	f000 f93b 	bl	8000620 <iprintf>

	while (1);
 80003aa:	e7fe      	b.n	80003aa <UsageFault_Handler_C+0x92>
 80003ac:	0800165c 	.word	0x0800165c
 80003b0:	e000ed2a 	.word	0xe000ed2a
 80003b4:	08001674 	.word	0x08001674
 80003b8:	08001680 	.word	0x08001680
 80003bc:	0800168c 	.word	0x0800168c
 80003c0:	08001698 	.word	0x08001698
 80003c4:	080016a4 	.word	0x080016a4
 80003c8:	080016b0 	.word	0x080016b0
 80003cc:	080016bc 	.word	0x080016bc
 80003d0:	080016c8 	.word	0x080016c8
 80003d4:	080016d4 	.word	0x080016d4
 80003d8:	080016e0 	.word	0x080016e0

080003dc <ITM_SendChar>:
#define ITM_STIMULUS_PORT0      *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN            *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)

{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
    /* Enable TRCENA */
    DEMCR |= ( 1 << 24);
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <ITM_SendChar+0x44>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <ITM_SendChar+0x44>)
 80003ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f0:	6013      	str	r3, [r2, #0]

    /* Enable stimulus port 0 */
    ITM_TRACE_EN |= ( 1 << 0);
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <ITM_SendChar+0x48>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <ITM_SendChar+0x48>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]

    /* Read FIFO status in bit [0] */
    while(!(ITM_STIMULUS_PORT0 & 1));
 80003fe:	bf00      	nop
 8000400:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f8      	beq.n	8000400 <ITM_SendChar+0x24>

    /* Write to ITM stimulus port0 */
    ITM_STIMULUS_PORT0 = ch;
 800040e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	6013      	str	r3, [r2, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	e000edfc 	.word	0xe000edfc
 8000424:	e0000e00 	.word	0xe0000e00

08000428 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e00a      	b.n	8000450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043a:	f3af 8000 	nop.w
 800043e:	4601      	mov	r1, r0
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60ba      	str	r2, [r7, #8]
 8000446:	b2ca      	uxtb	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697a      	ldr	r2, [r7, #20]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dbf0      	blt.n	800043a <_read+0x12>
	}

return len;
 8000458:	687b      	ldr	r3, [r7, #4]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	60f8      	str	r0, [r7, #12]
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e009      	b.n	8000488 <_write+0x26>
	{
        // __io_putchar(*ptr++); // commented out by Klee to implement printf like feature

        ITM_SendChar(*ptr++); // added this instead to use ITM feature
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ffad 	bl	80003dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	429a      	cmp	r2, r3
 800048e:	dbf1      	blt.n	8000474 <_write+0x12>
    }
	return len;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_close>:

int _close(int file)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	return -1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c0:	605a      	str	r2, [r3, #4]
	return 0;
 80004c2:	2300      	movs	r3, #0
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <_isatty>:

int _isatty(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	return 1;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b085      	sub	sp, #20
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
	return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
	...

080004fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <_sbrk+0x5c>)
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <_sbrk+0x60>)
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <_sbrk+0x64>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <_sbrk+0x64>)
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <_sbrk+0x68>)
 800051c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	429a      	cmp	r2, r3
 800052a:	d207      	bcs.n	800053c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800052c:	f000 f846 	bl	80005bc <__errno>
 8000530:	4603      	mov	r3, r0
 8000532:	220c      	movs	r2, #12
 8000534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053a:	e009      	b.n	8000550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <_sbrk+0x64>)
 800054c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054e:	68fb      	ldr	r3, [r7, #12]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20020000 	.word	0x20020000
 800055c:	00000400 	.word	0x00000400
 8000560:	20000080 	.word	0x20000080
 8000564:	20000098 	.word	0x20000098

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f000 f817 	bl	80005c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fe79 	bl	8000290 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005ac:	0800178c 	.word	0x0800178c
  ldr r2, =_sbss
 80005b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005b4:	20000094 	.word	0x20000094

080005b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC_IRQHandler>
	...

080005bc <__errno>:
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <__errno+0x8>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000

080005c8 <__libc_init_array>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	4d0d      	ldr	r5, [pc, #52]	; (8000600 <__libc_init_array+0x38>)
 80005cc:	4c0d      	ldr	r4, [pc, #52]	; (8000604 <__libc_init_array+0x3c>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	2600      	movs	r6, #0
 80005d4:	42a6      	cmp	r6, r4
 80005d6:	d109      	bne.n	80005ec <__libc_init_array+0x24>
 80005d8:	4d0b      	ldr	r5, [pc, #44]	; (8000608 <__libc_init_array+0x40>)
 80005da:	4c0c      	ldr	r4, [pc, #48]	; (800060c <__libc_init_array+0x44>)
 80005dc:	f001 f81c 	bl	8001618 <_init>
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	2600      	movs	r6, #0
 80005e6:	42a6      	cmp	r6, r4
 80005e8:	d105      	bne.n	80005f6 <__libc_init_array+0x2e>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f0:	4798      	blx	r3
 80005f2:	3601      	adds	r6, #1
 80005f4:	e7ee      	b.n	80005d4 <__libc_init_array+0xc>
 80005f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fa:	4798      	blx	r3
 80005fc:	3601      	adds	r6, #1
 80005fe:	e7f2      	b.n	80005e6 <__libc_init_array+0x1e>
 8000600:	08001784 	.word	0x08001784
 8000604:	08001784 	.word	0x08001784
 8000608:	08001784 	.word	0x08001784
 800060c:	08001788 	.word	0x08001788

08000610 <memset>:
 8000610:	4402      	add	r2, r0
 8000612:	4603      	mov	r3, r0
 8000614:	4293      	cmp	r3, r2
 8000616:	d100      	bne.n	800061a <memset+0xa>
 8000618:	4770      	bx	lr
 800061a:	f803 1b01 	strb.w	r1, [r3], #1
 800061e:	e7f9      	b.n	8000614 <memset+0x4>

08000620 <iprintf>:
 8000620:	b40f      	push	{r0, r1, r2, r3}
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <iprintf+0x2c>)
 8000624:	b513      	push	{r0, r1, r4, lr}
 8000626:	681c      	ldr	r4, [r3, #0]
 8000628:	b124      	cbz	r4, 8000634 <iprintf+0x14>
 800062a:	69a3      	ldr	r3, [r4, #24]
 800062c:	b913      	cbnz	r3, 8000634 <iprintf+0x14>
 800062e:	4620      	mov	r0, r4
 8000630:	f000 fa5a 	bl	8000ae8 <__sinit>
 8000634:	ab05      	add	r3, sp, #20
 8000636:	9a04      	ldr	r2, [sp, #16]
 8000638:	68a1      	ldr	r1, [r4, #8]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	4620      	mov	r0, r4
 800063e:	f000 fc5f 	bl	8000f00 <_vfiprintf_r>
 8000642:	b002      	add	sp, #8
 8000644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000

08000650 <_puts_r>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	460e      	mov	r6, r1
 8000654:	4605      	mov	r5, r0
 8000656:	b118      	cbz	r0, 8000660 <_puts_r+0x10>
 8000658:	6983      	ldr	r3, [r0, #24]
 800065a:	b90b      	cbnz	r3, 8000660 <_puts_r+0x10>
 800065c:	f000 fa44 	bl	8000ae8 <__sinit>
 8000660:	69ab      	ldr	r3, [r5, #24]
 8000662:	68ac      	ldr	r4, [r5, #8]
 8000664:	b913      	cbnz	r3, 800066c <_puts_r+0x1c>
 8000666:	4628      	mov	r0, r5
 8000668:	f000 fa3e 	bl	8000ae8 <__sinit>
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <_puts_r+0xd0>)
 800066e:	429c      	cmp	r4, r3
 8000670:	d120      	bne.n	80006b4 <_puts_r+0x64>
 8000672:	686c      	ldr	r4, [r5, #4]
 8000674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000676:	07db      	lsls	r3, r3, #31
 8000678:	d405      	bmi.n	8000686 <_puts_r+0x36>
 800067a:	89a3      	ldrh	r3, [r4, #12]
 800067c:	0598      	lsls	r0, r3, #22
 800067e:	d402      	bmi.n	8000686 <_puts_r+0x36>
 8000680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000682:	f000 facf 	bl	8000c24 <__retarget_lock_acquire_recursive>
 8000686:	89a3      	ldrh	r3, [r4, #12]
 8000688:	0719      	lsls	r1, r3, #28
 800068a:	d51d      	bpl.n	80006c8 <_puts_r+0x78>
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	b1db      	cbz	r3, 80006c8 <_puts_r+0x78>
 8000690:	3e01      	subs	r6, #1
 8000692:	68a3      	ldr	r3, [r4, #8]
 8000694:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000698:	3b01      	subs	r3, #1
 800069a:	60a3      	str	r3, [r4, #8]
 800069c:	bb39      	cbnz	r1, 80006ee <_puts_r+0x9e>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da38      	bge.n	8000714 <_puts_r+0xc4>
 80006a2:	4622      	mov	r2, r4
 80006a4:	210a      	movs	r1, #10
 80006a6:	4628      	mov	r0, r5
 80006a8:	f000 f848 	bl	800073c <__swbuf_r>
 80006ac:	3001      	adds	r0, #1
 80006ae:	d011      	beq.n	80006d4 <_puts_r+0x84>
 80006b0:	250a      	movs	r5, #10
 80006b2:	e011      	b.n	80006d8 <_puts_r+0x88>
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <_puts_r+0xd4>)
 80006b6:	429c      	cmp	r4, r3
 80006b8:	d101      	bne.n	80006be <_puts_r+0x6e>
 80006ba:	68ac      	ldr	r4, [r5, #8]
 80006bc:	e7da      	b.n	8000674 <_puts_r+0x24>
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <_puts_r+0xd8>)
 80006c0:	429c      	cmp	r4, r3
 80006c2:	bf08      	it	eq
 80006c4:	68ec      	ldreq	r4, [r5, #12]
 80006c6:	e7d5      	b.n	8000674 <_puts_r+0x24>
 80006c8:	4621      	mov	r1, r4
 80006ca:	4628      	mov	r0, r5
 80006cc:	f000 f888 	bl	80007e0 <__swsetup_r>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d0dd      	beq.n	8000690 <_puts_r+0x40>
 80006d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80006d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006da:	07da      	lsls	r2, r3, #31
 80006dc:	d405      	bmi.n	80006ea <_puts_r+0x9a>
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	059b      	lsls	r3, r3, #22
 80006e2:	d402      	bmi.n	80006ea <_puts_r+0x9a>
 80006e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006e6:	f000 fa9e 	bl	8000c26 <__retarget_lock_release_recursive>
 80006ea:	4628      	mov	r0, r5
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da04      	bge.n	80006fc <_puts_r+0xac>
 80006f2:	69a2      	ldr	r2, [r4, #24]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dc06      	bgt.n	8000706 <_puts_r+0xb6>
 80006f8:	290a      	cmp	r1, #10
 80006fa:	d004      	beq.n	8000706 <_puts_r+0xb6>
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	6022      	str	r2, [r4, #0]
 8000702:	7019      	strb	r1, [r3, #0]
 8000704:	e7c5      	b.n	8000692 <_puts_r+0x42>
 8000706:	4622      	mov	r2, r4
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f817 	bl	800073c <__swbuf_r>
 800070e:	3001      	adds	r0, #1
 8000710:	d1bf      	bne.n	8000692 <_puts_r+0x42>
 8000712:	e7df      	b.n	80006d4 <_puts_r+0x84>
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	250a      	movs	r5, #10
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	6022      	str	r2, [r4, #0]
 800071c:	701d      	strb	r5, [r3, #0]
 800071e:	e7db      	b.n	80006d8 <_puts_r+0x88>
 8000720:	08001710 	.word	0x08001710
 8000724:	08001730 	.word	0x08001730
 8000728:	080016f0 	.word	0x080016f0

0800072c <puts>:
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <puts+0xc>)
 800072e:	4601      	mov	r1, r0
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f7ff bf8d 	b.w	8000650 <_puts_r>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000

0800073c <__swbuf_r>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	460e      	mov	r6, r1
 8000740:	4614      	mov	r4, r2
 8000742:	4605      	mov	r5, r0
 8000744:	b118      	cbz	r0, 800074e <__swbuf_r+0x12>
 8000746:	6983      	ldr	r3, [r0, #24]
 8000748:	b90b      	cbnz	r3, 800074e <__swbuf_r+0x12>
 800074a:	f000 f9cd 	bl	8000ae8 <__sinit>
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <__swbuf_r+0x98>)
 8000750:	429c      	cmp	r4, r3
 8000752:	d12b      	bne.n	80007ac <__swbuf_r+0x70>
 8000754:	686c      	ldr	r4, [r5, #4]
 8000756:	69a3      	ldr	r3, [r4, #24]
 8000758:	60a3      	str	r3, [r4, #8]
 800075a:	89a3      	ldrh	r3, [r4, #12]
 800075c:	071a      	lsls	r2, r3, #28
 800075e:	d52f      	bpl.n	80007c0 <__swbuf_r+0x84>
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	b36b      	cbz	r3, 80007c0 <__swbuf_r+0x84>
 8000764:	6923      	ldr	r3, [r4, #16]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	1ac0      	subs	r0, r0, r3
 800076a:	6963      	ldr	r3, [r4, #20]
 800076c:	b2f6      	uxtb	r6, r6
 800076e:	4283      	cmp	r3, r0
 8000770:	4637      	mov	r7, r6
 8000772:	dc04      	bgt.n	800077e <__swbuf_r+0x42>
 8000774:	4621      	mov	r1, r4
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f922 	bl	80009c0 <_fflush_r>
 800077c:	bb30      	cbnz	r0, 80007cc <__swbuf_r+0x90>
 800077e:	68a3      	ldr	r3, [r4, #8]
 8000780:	3b01      	subs	r3, #1
 8000782:	60a3      	str	r3, [r4, #8]
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	6022      	str	r2, [r4, #0]
 800078a:	701e      	strb	r6, [r3, #0]
 800078c:	6963      	ldr	r3, [r4, #20]
 800078e:	3001      	adds	r0, #1
 8000790:	4283      	cmp	r3, r0
 8000792:	d004      	beq.n	800079e <__swbuf_r+0x62>
 8000794:	89a3      	ldrh	r3, [r4, #12]
 8000796:	07db      	lsls	r3, r3, #31
 8000798:	d506      	bpl.n	80007a8 <__swbuf_r+0x6c>
 800079a:	2e0a      	cmp	r6, #10
 800079c:	d104      	bne.n	80007a8 <__swbuf_r+0x6c>
 800079e:	4621      	mov	r1, r4
 80007a0:	4628      	mov	r0, r5
 80007a2:	f000 f90d 	bl	80009c0 <_fflush_r>
 80007a6:	b988      	cbnz	r0, 80007cc <__swbuf_r+0x90>
 80007a8:	4638      	mov	r0, r7
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <__swbuf_r+0x9c>)
 80007ae:	429c      	cmp	r4, r3
 80007b0:	d101      	bne.n	80007b6 <__swbuf_r+0x7a>
 80007b2:	68ac      	ldr	r4, [r5, #8]
 80007b4:	e7cf      	b.n	8000756 <__swbuf_r+0x1a>
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <__swbuf_r+0xa0>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	bf08      	it	eq
 80007bc:	68ec      	ldreq	r4, [r5, #12]
 80007be:	e7ca      	b.n	8000756 <__swbuf_r+0x1a>
 80007c0:	4621      	mov	r1, r4
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f80c 	bl	80007e0 <__swsetup_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d0cb      	beq.n	8000764 <__swbuf_r+0x28>
 80007cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80007d0:	e7ea      	b.n	80007a8 <__swbuf_r+0x6c>
 80007d2:	bf00      	nop
 80007d4:	08001710 	.word	0x08001710
 80007d8:	08001730 	.word	0x08001730
 80007dc:	080016f0 	.word	0x080016f0

080007e0 <__swsetup_r>:
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <__swsetup_r+0xcc>)
 80007e2:	b570      	push	{r4, r5, r6, lr}
 80007e4:	681d      	ldr	r5, [r3, #0]
 80007e6:	4606      	mov	r6, r0
 80007e8:	460c      	mov	r4, r1
 80007ea:	b125      	cbz	r5, 80007f6 <__swsetup_r+0x16>
 80007ec:	69ab      	ldr	r3, [r5, #24]
 80007ee:	b913      	cbnz	r3, 80007f6 <__swsetup_r+0x16>
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f979 	bl	8000ae8 <__sinit>
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <__swsetup_r+0xd0>)
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d10f      	bne.n	800081c <__swsetup_r+0x3c>
 80007fc:	686c      	ldr	r4, [r5, #4]
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000804:	0719      	lsls	r1, r3, #28
 8000806:	d42c      	bmi.n	8000862 <__swsetup_r+0x82>
 8000808:	06dd      	lsls	r5, r3, #27
 800080a:	d411      	bmi.n	8000830 <__swsetup_r+0x50>
 800080c:	2309      	movs	r3, #9
 800080e:	6033      	str	r3, [r6, #0]
 8000810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000814:	81a3      	strh	r3, [r4, #12]
 8000816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081a:	e03e      	b.n	800089a <__swsetup_r+0xba>
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <__swsetup_r+0xd4>)
 800081e:	429c      	cmp	r4, r3
 8000820:	d101      	bne.n	8000826 <__swsetup_r+0x46>
 8000822:	68ac      	ldr	r4, [r5, #8]
 8000824:	e7eb      	b.n	80007fe <__swsetup_r+0x1e>
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <__swsetup_r+0xd8>)
 8000828:	429c      	cmp	r4, r3
 800082a:	bf08      	it	eq
 800082c:	68ec      	ldreq	r4, [r5, #12]
 800082e:	e7e6      	b.n	80007fe <__swsetup_r+0x1e>
 8000830:	0758      	lsls	r0, r3, #29
 8000832:	d512      	bpl.n	800085a <__swsetup_r+0x7a>
 8000834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000836:	b141      	cbz	r1, 800084a <__swsetup_r+0x6a>
 8000838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800083c:	4299      	cmp	r1, r3
 800083e:	d002      	beq.n	8000846 <__swsetup_r+0x66>
 8000840:	4630      	mov	r0, r6
 8000842:	f000 fa57 	bl	8000cf4 <_free_r>
 8000846:	2300      	movs	r3, #0
 8000848:	6363      	str	r3, [r4, #52]	; 0x34
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000850:	81a3      	strh	r3, [r4, #12]
 8000852:	2300      	movs	r3, #0
 8000854:	6063      	str	r3, [r4, #4]
 8000856:	6923      	ldr	r3, [r4, #16]
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	81a3      	strh	r3, [r4, #12]
 8000862:	6923      	ldr	r3, [r4, #16]
 8000864:	b94b      	cbnz	r3, 800087a <__swsetup_r+0x9a>
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800086c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000870:	d003      	beq.n	800087a <__swsetup_r+0x9a>
 8000872:	4621      	mov	r1, r4
 8000874:	4630      	mov	r0, r6
 8000876:	f000 f9fd 	bl	8000c74 <__smakebuf_r>
 800087a:	89a0      	ldrh	r0, [r4, #12]
 800087c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000880:	f010 0301 	ands.w	r3, r0, #1
 8000884:	d00a      	beq.n	800089c <__swsetup_r+0xbc>
 8000886:	2300      	movs	r3, #0
 8000888:	60a3      	str	r3, [r4, #8]
 800088a:	6963      	ldr	r3, [r4, #20]
 800088c:	425b      	negs	r3, r3
 800088e:	61a3      	str	r3, [r4, #24]
 8000890:	6923      	ldr	r3, [r4, #16]
 8000892:	b943      	cbnz	r3, 80008a6 <__swsetup_r+0xc6>
 8000894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000898:	d1ba      	bne.n	8000810 <__swsetup_r+0x30>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	0781      	lsls	r1, r0, #30
 800089e:	bf58      	it	pl
 80008a0:	6963      	ldrpl	r3, [r4, #20]
 80008a2:	60a3      	str	r3, [r4, #8]
 80008a4:	e7f4      	b.n	8000890 <__swsetup_r+0xb0>
 80008a6:	2000      	movs	r0, #0
 80008a8:	e7f7      	b.n	800089a <__swsetup_r+0xba>
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000
 80008b0:	08001710 	.word	0x08001710
 80008b4:	08001730 	.word	0x08001730
 80008b8:	080016f0 	.word	0x080016f0

080008bc <__sflush_r>:
 80008bc:	898a      	ldrh	r2, [r1, #12]
 80008be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c0:	4605      	mov	r5, r0
 80008c2:	0710      	lsls	r0, r2, #28
 80008c4:	460c      	mov	r4, r1
 80008c6:	d457      	bmi.n	8000978 <__sflush_r+0xbc>
 80008c8:	684b      	ldr	r3, [r1, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dc04      	bgt.n	80008d8 <__sflush_r+0x1c>
 80008ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dc01      	bgt.n	80008d8 <__sflush_r+0x1c>
 80008d4:	2000      	movs	r0, #0
 80008d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d0fa      	beq.n	80008d4 <__sflush_r+0x18>
 80008de:	2300      	movs	r3, #0
 80008e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008e4:	682f      	ldr	r7, [r5, #0]
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	d032      	beq.n	8000950 <__sflush_r+0x94>
 80008ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	075a      	lsls	r2, r3, #29
 80008f0:	d505      	bpl.n	80008fe <__sflush_r+0x42>
 80008f2:	6863      	ldr	r3, [r4, #4]
 80008f4:	1ac0      	subs	r0, r0, r3
 80008f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008f8:	b10b      	cbz	r3, 80008fe <__sflush_r+0x42>
 80008fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008fc:	1ac0      	subs	r0, r0, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	4602      	mov	r2, r0
 8000902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000904:	6a21      	ldr	r1, [r4, #32]
 8000906:	4628      	mov	r0, r5
 8000908:	47b0      	blx	r6
 800090a:	1c43      	adds	r3, r0, #1
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	d106      	bne.n	800091e <__sflush_r+0x62>
 8000910:	6829      	ldr	r1, [r5, #0]
 8000912:	291d      	cmp	r1, #29
 8000914:	d82c      	bhi.n	8000970 <__sflush_r+0xb4>
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <__sflush_r+0x100>)
 8000918:	40ca      	lsrs	r2, r1
 800091a:	07d6      	lsls	r6, r2, #31
 800091c:	d528      	bpl.n	8000970 <__sflush_r+0xb4>
 800091e:	2200      	movs	r2, #0
 8000920:	6062      	str	r2, [r4, #4]
 8000922:	04d9      	lsls	r1, r3, #19
 8000924:	6922      	ldr	r2, [r4, #16]
 8000926:	6022      	str	r2, [r4, #0]
 8000928:	d504      	bpl.n	8000934 <__sflush_r+0x78>
 800092a:	1c42      	adds	r2, r0, #1
 800092c:	d101      	bne.n	8000932 <__sflush_r+0x76>
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	b903      	cbnz	r3, 8000934 <__sflush_r+0x78>
 8000932:	6560      	str	r0, [r4, #84]	; 0x54
 8000934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000936:	602f      	str	r7, [r5, #0]
 8000938:	2900      	cmp	r1, #0
 800093a:	d0cb      	beq.n	80008d4 <__sflush_r+0x18>
 800093c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000940:	4299      	cmp	r1, r3
 8000942:	d002      	beq.n	800094a <__sflush_r+0x8e>
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f9d5 	bl	8000cf4 <_free_r>
 800094a:	2000      	movs	r0, #0
 800094c:	6360      	str	r0, [r4, #52]	; 0x34
 800094e:	e7c2      	b.n	80008d6 <__sflush_r+0x1a>
 8000950:	6a21      	ldr	r1, [r4, #32]
 8000952:	2301      	movs	r3, #1
 8000954:	4628      	mov	r0, r5
 8000956:	47b0      	blx	r6
 8000958:	1c41      	adds	r1, r0, #1
 800095a:	d1c7      	bne.n	80008ec <__sflush_r+0x30>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0c4      	beq.n	80008ec <__sflush_r+0x30>
 8000962:	2b1d      	cmp	r3, #29
 8000964:	d001      	beq.n	800096a <__sflush_r+0xae>
 8000966:	2b16      	cmp	r3, #22
 8000968:	d101      	bne.n	800096e <__sflush_r+0xb2>
 800096a:	602f      	str	r7, [r5, #0]
 800096c:	e7b2      	b.n	80008d4 <__sflush_r+0x18>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	81a3      	strh	r3, [r4, #12]
 8000976:	e7ae      	b.n	80008d6 <__sflush_r+0x1a>
 8000978:	690f      	ldr	r7, [r1, #16]
 800097a:	2f00      	cmp	r7, #0
 800097c:	d0aa      	beq.n	80008d4 <__sflush_r+0x18>
 800097e:	0793      	lsls	r3, r2, #30
 8000980:	680e      	ldr	r6, [r1, #0]
 8000982:	bf08      	it	eq
 8000984:	694b      	ldreq	r3, [r1, #20]
 8000986:	600f      	str	r7, [r1, #0]
 8000988:	bf18      	it	ne
 800098a:	2300      	movne	r3, #0
 800098c:	1bf6      	subs	r6, r6, r7
 800098e:	608b      	str	r3, [r1, #8]
 8000990:	2e00      	cmp	r6, #0
 8000992:	dd9f      	ble.n	80008d4 <__sflush_r+0x18>
 8000994:	6a21      	ldr	r1, [r4, #32]
 8000996:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800099a:	4633      	mov	r3, r6
 800099c:	463a      	mov	r2, r7
 800099e:	4628      	mov	r0, r5
 80009a0:	47e0      	blx	ip
 80009a2:	2800      	cmp	r0, #0
 80009a4:	dc06      	bgt.n	80009b4 <__sflush_r+0xf8>
 80009a6:	89a3      	ldrh	r3, [r4, #12]
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	81a3      	strh	r3, [r4, #12]
 80009ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b2:	e790      	b.n	80008d6 <__sflush_r+0x1a>
 80009b4:	4407      	add	r7, r0
 80009b6:	1a36      	subs	r6, r6, r0
 80009b8:	e7ea      	b.n	8000990 <__sflush_r+0xd4>
 80009ba:	bf00      	nop
 80009bc:	20400001 	.word	0x20400001

080009c0 <_fflush_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	690b      	ldr	r3, [r1, #16]
 80009c4:	4605      	mov	r5, r0
 80009c6:	460c      	mov	r4, r1
 80009c8:	b913      	cbnz	r3, 80009d0 <_fflush_r+0x10>
 80009ca:	2500      	movs	r5, #0
 80009cc:	4628      	mov	r0, r5
 80009ce:	bd38      	pop	{r3, r4, r5, pc}
 80009d0:	b118      	cbz	r0, 80009da <_fflush_r+0x1a>
 80009d2:	6983      	ldr	r3, [r0, #24]
 80009d4:	b90b      	cbnz	r3, 80009da <_fflush_r+0x1a>
 80009d6:	f000 f887 	bl	8000ae8 <__sinit>
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <_fflush_r+0x6c>)
 80009dc:	429c      	cmp	r4, r3
 80009de:	d11b      	bne.n	8000a18 <_fflush_r+0x58>
 80009e0:	686c      	ldr	r4, [r5, #4]
 80009e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0ef      	beq.n	80009ca <_fflush_r+0xa>
 80009ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009ec:	07d0      	lsls	r0, r2, #31
 80009ee:	d404      	bmi.n	80009fa <_fflush_r+0x3a>
 80009f0:	0599      	lsls	r1, r3, #22
 80009f2:	d402      	bmi.n	80009fa <_fflush_r+0x3a>
 80009f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009f6:	f000 f915 	bl	8000c24 <__retarget_lock_acquire_recursive>
 80009fa:	4628      	mov	r0, r5
 80009fc:	4621      	mov	r1, r4
 80009fe:	f7ff ff5d 	bl	80008bc <__sflush_r>
 8000a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a04:	07da      	lsls	r2, r3, #31
 8000a06:	4605      	mov	r5, r0
 8000a08:	d4e0      	bmi.n	80009cc <_fflush_r+0xc>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	059b      	lsls	r3, r3, #22
 8000a0e:	d4dd      	bmi.n	80009cc <_fflush_r+0xc>
 8000a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a12:	f000 f908 	bl	8000c26 <__retarget_lock_release_recursive>
 8000a16:	e7d9      	b.n	80009cc <_fflush_r+0xc>
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <_fflush_r+0x70>)
 8000a1a:	429c      	cmp	r4, r3
 8000a1c:	d101      	bne.n	8000a22 <_fflush_r+0x62>
 8000a1e:	68ac      	ldr	r4, [r5, #8]
 8000a20:	e7df      	b.n	80009e2 <_fflush_r+0x22>
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <_fflush_r+0x74>)
 8000a24:	429c      	cmp	r4, r3
 8000a26:	bf08      	it	eq
 8000a28:	68ec      	ldreq	r4, [r5, #12]
 8000a2a:	e7da      	b.n	80009e2 <_fflush_r+0x22>
 8000a2c:	08001710 	.word	0x08001710
 8000a30:	08001730 	.word	0x08001730
 8000a34:	080016f0 	.word	0x080016f0

08000a38 <std>:
 8000a38:	2300      	movs	r3, #0
 8000a3a:	b510      	push	{r4, lr}
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a46:	6083      	str	r3, [r0, #8]
 8000a48:	8181      	strh	r1, [r0, #12]
 8000a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a4c:	81c2      	strh	r2, [r0, #14]
 8000a4e:	6183      	str	r3, [r0, #24]
 8000a50:	4619      	mov	r1, r3
 8000a52:	2208      	movs	r2, #8
 8000a54:	305c      	adds	r0, #92	; 0x5c
 8000a56:	f7ff fddb 	bl	8000610 <memset>
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <std+0x38>)
 8000a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <std+0x3c>)
 8000a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <std+0x40>)
 8000a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <std+0x44>)
 8000a68:	6224      	str	r4, [r4, #32]
 8000a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	080014a9 	.word	0x080014a9
 8000a74:	080014cb 	.word	0x080014cb
 8000a78:	08001503 	.word	0x08001503
 8000a7c:	08001527 	.word	0x08001527

08000a80 <_cleanup_r>:
 8000a80:	4901      	ldr	r1, [pc, #4]	; (8000a88 <_cleanup_r+0x8>)
 8000a82:	f000 b8af 	b.w	8000be4 <_fwalk_reent>
 8000a86:	bf00      	nop
 8000a88:	080009c1 	.word	0x080009c1

08000a8c <__sfmoreglue>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	2268      	movs	r2, #104	; 0x68
 8000a90:	1e4d      	subs	r5, r1, #1
 8000a92:	4355      	muls	r5, r2
 8000a94:	460e      	mov	r6, r1
 8000a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a9a:	f000 f995 	bl	8000dc8 <_malloc_r>
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	b140      	cbz	r0, 8000ab4 <__sfmoreglue+0x28>
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8000aa8:	300c      	adds	r0, #12
 8000aaa:	60a0      	str	r0, [r4, #8]
 8000aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ab0:	f7ff fdae 	bl	8000610 <memset>
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}

08000ab8 <__sfp_lock_acquire>:
 8000ab8:	4801      	ldr	r0, [pc, #4]	; (8000ac0 <__sfp_lock_acquire+0x8>)
 8000aba:	f000 b8b3 	b.w	8000c24 <__retarget_lock_acquire_recursive>
 8000abe:	bf00      	nop
 8000ac0:	20000085 	.word	0x20000085

08000ac4 <__sfp_lock_release>:
 8000ac4:	4801      	ldr	r0, [pc, #4]	; (8000acc <__sfp_lock_release+0x8>)
 8000ac6:	f000 b8ae 	b.w	8000c26 <__retarget_lock_release_recursive>
 8000aca:	bf00      	nop
 8000acc:	20000085 	.word	0x20000085

08000ad0 <__sinit_lock_acquire>:
 8000ad0:	4801      	ldr	r0, [pc, #4]	; (8000ad8 <__sinit_lock_acquire+0x8>)
 8000ad2:	f000 b8a7 	b.w	8000c24 <__retarget_lock_acquire_recursive>
 8000ad6:	bf00      	nop
 8000ad8:	20000086 	.word	0x20000086

08000adc <__sinit_lock_release>:
 8000adc:	4801      	ldr	r0, [pc, #4]	; (8000ae4 <__sinit_lock_release+0x8>)
 8000ade:	f000 b8a2 	b.w	8000c26 <__retarget_lock_release_recursive>
 8000ae2:	bf00      	nop
 8000ae4:	20000086 	.word	0x20000086

08000ae8 <__sinit>:
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	4604      	mov	r4, r0
 8000aec:	f7ff fff0 	bl	8000ad0 <__sinit_lock_acquire>
 8000af0:	69a3      	ldr	r3, [r4, #24]
 8000af2:	b11b      	cbz	r3, 8000afc <__sinit+0x14>
 8000af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af8:	f7ff bff0 	b.w	8000adc <__sinit_lock_release>
 8000afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b00:	6523      	str	r3, [r4, #80]	; 0x50
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <__sinit+0x68>)
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <__sinit+0x6c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b0a:	42a3      	cmp	r3, r4
 8000b0c:	bf04      	itt	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	61a3      	streq	r3, [r4, #24]
 8000b12:	4620      	mov	r0, r4
 8000b14:	f000 f820 	bl	8000b58 <__sfp>
 8000b18:	6060      	str	r0, [r4, #4]
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 f81c 	bl	8000b58 <__sfp>
 8000b20:	60a0      	str	r0, [r4, #8]
 8000b22:	4620      	mov	r0, r4
 8000b24:	f000 f818 	bl	8000b58 <__sfp>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60e0      	str	r0, [r4, #12]
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	6860      	ldr	r0, [r4, #4]
 8000b30:	f7ff ff82 	bl	8000a38 <std>
 8000b34:	68a0      	ldr	r0, [r4, #8]
 8000b36:	2201      	movs	r2, #1
 8000b38:	2109      	movs	r1, #9
 8000b3a:	f7ff ff7d 	bl	8000a38 <std>
 8000b3e:	68e0      	ldr	r0, [r4, #12]
 8000b40:	2202      	movs	r2, #2
 8000b42:	2112      	movs	r1, #18
 8000b44:	f7ff ff78 	bl	8000a38 <std>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61a3      	str	r3, [r4, #24]
 8000b4c:	e7d2      	b.n	8000af4 <__sinit+0xc>
 8000b4e:	bf00      	nop
 8000b50:	080016ec 	.word	0x080016ec
 8000b54:	08000a81 	.word	0x08000a81

08000b58 <__sfp>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	4607      	mov	r7, r0
 8000b5c:	f7ff ffac 	bl	8000ab8 <__sfp_lock_acquire>
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <__sfp+0x84>)
 8000b62:	681e      	ldr	r6, [r3, #0]
 8000b64:	69b3      	ldr	r3, [r6, #24]
 8000b66:	b913      	cbnz	r3, 8000b6e <__sfp+0x16>
 8000b68:	4630      	mov	r0, r6
 8000b6a:	f7ff ffbd 	bl	8000ae8 <__sinit>
 8000b6e:	3648      	adds	r6, #72	; 0x48
 8000b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	d503      	bpl.n	8000b80 <__sfp+0x28>
 8000b78:	6833      	ldr	r3, [r6, #0]
 8000b7a:	b30b      	cbz	r3, 8000bc0 <__sfp+0x68>
 8000b7c:	6836      	ldr	r6, [r6, #0]
 8000b7e:	e7f7      	b.n	8000b70 <__sfp+0x18>
 8000b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b84:	b9d5      	cbnz	r5, 8000bbc <__sfp+0x64>
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <__sfp+0x88>)
 8000b88:	60e3      	str	r3, [r4, #12]
 8000b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8000b90:	f000 f847 	bl	8000c22 <__retarget_lock_init_recursive>
 8000b94:	f7ff ff96 	bl	8000ac4 <__sfp_lock_release>
 8000b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ba0:	6025      	str	r5, [r4, #0]
 8000ba2:	61a5      	str	r5, [r4, #24]
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4629      	mov	r1, r5
 8000ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bac:	f7ff fd30 	bl	8000610 <memset>
 8000bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bb8:	4620      	mov	r0, r4
 8000bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bbc:	3468      	adds	r4, #104	; 0x68
 8000bbe:	e7d9      	b.n	8000b74 <__sfp+0x1c>
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	f7ff ff62 	bl	8000a8c <__sfmoreglue>
 8000bc8:	4604      	mov	r4, r0
 8000bca:	6030      	str	r0, [r6, #0]
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d1d5      	bne.n	8000b7c <__sfp+0x24>
 8000bd0:	f7ff ff78 	bl	8000ac4 <__sfp_lock_release>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	e7ee      	b.n	8000bb8 <__sfp+0x60>
 8000bda:	bf00      	nop
 8000bdc:	080016ec 	.word	0x080016ec
 8000be0:	ffff0001 	.word	0xffff0001

08000be4 <_fwalk_reent>:
 8000be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be8:	4606      	mov	r6, r0
 8000bea:	4688      	mov	r8, r1
 8000bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8000bfa:	d505      	bpl.n	8000c08 <_fwalk_reent+0x24>
 8000bfc:	6824      	ldr	r4, [r4, #0]
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d1f7      	bne.n	8000bf2 <_fwalk_reent+0xe>
 8000c02:	4638      	mov	r0, r7
 8000c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c08:	89ab      	ldrh	r3, [r5, #12]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d907      	bls.n	8000c1e <_fwalk_reent+0x3a>
 8000c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c12:	3301      	adds	r3, #1
 8000c14:	d003      	beq.n	8000c1e <_fwalk_reent+0x3a>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4630      	mov	r0, r6
 8000c1a:	47c0      	blx	r8
 8000c1c:	4307      	orrs	r7, r0
 8000c1e:	3568      	adds	r5, #104	; 0x68
 8000c20:	e7e9      	b.n	8000bf6 <_fwalk_reent+0x12>

08000c22 <__retarget_lock_init_recursive>:
 8000c22:	4770      	bx	lr

08000c24 <__retarget_lock_acquire_recursive>:
 8000c24:	4770      	bx	lr

08000c26 <__retarget_lock_release_recursive>:
 8000c26:	4770      	bx	lr

08000c28 <__swhatbuf_r>:
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	460e      	mov	r6, r1
 8000c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c30:	2900      	cmp	r1, #0
 8000c32:	b096      	sub	sp, #88	; 0x58
 8000c34:	4614      	mov	r4, r2
 8000c36:	461d      	mov	r5, r3
 8000c38:	da08      	bge.n	8000c4c <__swhatbuf_r+0x24>
 8000c3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	602a      	str	r2, [r5, #0]
 8000c42:	061a      	lsls	r2, r3, #24
 8000c44:	d410      	bmi.n	8000c68 <__swhatbuf_r+0x40>
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	e00e      	b.n	8000c6a <__swhatbuf_r+0x42>
 8000c4c:	466a      	mov	r2, sp
 8000c4e:	f000 fc91 	bl	8001574 <_fstat_r>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	dbf1      	blt.n	8000c3a <__swhatbuf_r+0x12>
 8000c56:	9a01      	ldr	r2, [sp, #4]
 8000c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c60:	425a      	negs	r2, r3
 8000c62:	415a      	adcs	r2, r3
 8000c64:	602a      	str	r2, [r5, #0]
 8000c66:	e7ee      	b.n	8000c46 <__swhatbuf_r+0x1e>
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	6023      	str	r3, [r4, #0]
 8000c6e:	b016      	add	sp, #88	; 0x58
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c74 <__smakebuf_r>:
 8000c74:	898b      	ldrh	r3, [r1, #12]
 8000c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c78:	079d      	lsls	r5, r3, #30
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	d507      	bpl.n	8000c90 <__smakebuf_r+0x1c>
 8000c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c84:	6023      	str	r3, [r4, #0]
 8000c86:	6123      	str	r3, [r4, #16]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	6163      	str	r3, [r4, #20]
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	ab01      	add	r3, sp, #4
 8000c92:	466a      	mov	r2, sp
 8000c94:	f7ff ffc8 	bl	8000c28 <__swhatbuf_r>
 8000c98:	9900      	ldr	r1, [sp, #0]
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	f000 f893 	bl	8000dc8 <_malloc_r>
 8000ca2:	b948      	cbnz	r0, 8000cb8 <__smakebuf_r+0x44>
 8000ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca8:	059a      	lsls	r2, r3, #22
 8000caa:	d4ef      	bmi.n	8000c8c <__smakebuf_r+0x18>
 8000cac:	f023 0303 	bic.w	r3, r3, #3
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	81a3      	strh	r3, [r4, #12]
 8000cb6:	e7e3      	b.n	8000c80 <__smakebuf_r+0xc>
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <__smakebuf_r+0x7c>)
 8000cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	6020      	str	r0, [r4, #0]
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	81a3      	strh	r3, [r4, #12]
 8000cc6:	9b00      	ldr	r3, [sp, #0]
 8000cc8:	6163      	str	r3, [r4, #20]
 8000cca:	9b01      	ldr	r3, [sp, #4]
 8000ccc:	6120      	str	r0, [r4, #16]
 8000cce:	b15b      	cbz	r3, 8000ce8 <__smakebuf_r+0x74>
 8000cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	f000 fc5f 	bl	8001598 <_isatty_r>
 8000cda:	b128      	cbz	r0, 8000ce8 <__smakebuf_r+0x74>
 8000cdc:	89a3      	ldrh	r3, [r4, #12]
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	81a3      	strh	r3, [r4, #12]
 8000ce8:	89a0      	ldrh	r0, [r4, #12]
 8000cea:	4305      	orrs	r5, r0
 8000cec:	81a5      	strh	r5, [r4, #12]
 8000cee:	e7cd      	b.n	8000c8c <__smakebuf_r+0x18>
 8000cf0:	08000a81 	.word	0x08000a81

08000cf4 <_free_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d041      	beq.n	8000d80 <_free_r+0x8c>
 8000cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d00:	1f0c      	subs	r4, r1, #4
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bfb8      	it	lt
 8000d06:	18e4      	addlt	r4, r4, r3
 8000d08:	f000 fc68 	bl	80015dc <__malloc_lock>
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <_free_r+0x90>)
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	b933      	cbnz	r3, 8000d20 <_free_r+0x2c>
 8000d12:	6063      	str	r3, [r4, #4]
 8000d14:	6014      	str	r4, [r2, #0]
 8000d16:	4628      	mov	r0, r5
 8000d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d1c:	f000 bc64 	b.w	80015e8 <__malloc_unlock>
 8000d20:	42a3      	cmp	r3, r4
 8000d22:	d908      	bls.n	8000d36 <_free_r+0x42>
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	1821      	adds	r1, r4, r0
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	bf01      	itttt	eq
 8000d2c:	6819      	ldreq	r1, [r3, #0]
 8000d2e:	685b      	ldreq	r3, [r3, #4]
 8000d30:	1809      	addeq	r1, r1, r0
 8000d32:	6021      	streq	r1, [r4, #0]
 8000d34:	e7ed      	b.n	8000d12 <_free_r+0x1e>
 8000d36:	461a      	mov	r2, r3
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	b10b      	cbz	r3, 8000d40 <_free_r+0x4c>
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d9fa      	bls.n	8000d36 <_free_r+0x42>
 8000d40:	6811      	ldr	r1, [r2, #0]
 8000d42:	1850      	adds	r0, r2, r1
 8000d44:	42a0      	cmp	r0, r4
 8000d46:	d10b      	bne.n	8000d60 <_free_r+0x6c>
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	4401      	add	r1, r0
 8000d4c:	1850      	adds	r0, r2, r1
 8000d4e:	4283      	cmp	r3, r0
 8000d50:	6011      	str	r1, [r2, #0]
 8000d52:	d1e0      	bne.n	8000d16 <_free_r+0x22>
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	6053      	str	r3, [r2, #4]
 8000d5a:	4401      	add	r1, r0
 8000d5c:	6011      	str	r1, [r2, #0]
 8000d5e:	e7da      	b.n	8000d16 <_free_r+0x22>
 8000d60:	d902      	bls.n	8000d68 <_free_r+0x74>
 8000d62:	230c      	movs	r3, #12
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	e7d6      	b.n	8000d16 <_free_r+0x22>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	1821      	adds	r1, r4, r0
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf04      	itt	eq
 8000d70:	6819      	ldreq	r1, [r3, #0]
 8000d72:	685b      	ldreq	r3, [r3, #4]
 8000d74:	6063      	str	r3, [r4, #4]
 8000d76:	bf04      	itt	eq
 8000d78:	1809      	addeq	r1, r1, r0
 8000d7a:	6021      	streq	r1, [r4, #0]
 8000d7c:	6054      	str	r4, [r2, #4]
 8000d7e:	e7ca      	b.n	8000d16 <_free_r+0x22>
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
 8000d82:	bf00      	nop
 8000d84:	20000088 	.word	0x20000088

08000d88 <sbrk_aligned>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4e0e      	ldr	r6, [pc, #56]	; (8000dc4 <sbrk_aligned+0x3c>)
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	6831      	ldr	r1, [r6, #0]
 8000d90:	4605      	mov	r5, r0
 8000d92:	b911      	cbnz	r1, 8000d9a <sbrk_aligned+0x12>
 8000d94:	f000 fb78 	bl	8001488 <_sbrk_r>
 8000d98:	6030      	str	r0, [r6, #0]
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	f000 fb73 	bl	8001488 <_sbrk_r>
 8000da2:	1c43      	adds	r3, r0, #1
 8000da4:	d00a      	beq.n	8000dbc <sbrk_aligned+0x34>
 8000da6:	1cc4      	adds	r4, r0, #3
 8000da8:	f024 0403 	bic.w	r4, r4, #3
 8000dac:	42a0      	cmp	r0, r4
 8000dae:	d007      	beq.n	8000dc0 <sbrk_aligned+0x38>
 8000db0:	1a21      	subs	r1, r4, r0
 8000db2:	4628      	mov	r0, r5
 8000db4:	f000 fb68 	bl	8001488 <_sbrk_r>
 8000db8:	3001      	adds	r0, #1
 8000dba:	d101      	bne.n	8000dc0 <sbrk_aligned+0x38>
 8000dbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	2000008c 	.word	0x2000008c

08000dc8 <_malloc_r>:
 8000dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dcc:	1ccd      	adds	r5, r1, #3
 8000dce:	f025 0503 	bic.w	r5, r5, #3
 8000dd2:	3508      	adds	r5, #8
 8000dd4:	2d0c      	cmp	r5, #12
 8000dd6:	bf38      	it	cc
 8000dd8:	250c      	movcc	r5, #12
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	4607      	mov	r7, r0
 8000dde:	db01      	blt.n	8000de4 <_malloc_r+0x1c>
 8000de0:	42a9      	cmp	r1, r5
 8000de2:	d905      	bls.n	8000df0 <_malloc_r+0x28>
 8000de4:	230c      	movs	r3, #12
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	2600      	movs	r6, #0
 8000dea:	4630      	mov	r0, r6
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df0:	4e2e      	ldr	r6, [pc, #184]	; (8000eac <_malloc_r+0xe4>)
 8000df2:	f000 fbf3 	bl	80015dc <__malloc_lock>
 8000df6:	6833      	ldr	r3, [r6, #0]
 8000df8:	461c      	mov	r4, r3
 8000dfa:	bb34      	cbnz	r4, 8000e4a <_malloc_r+0x82>
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	4638      	mov	r0, r7
 8000e00:	f7ff ffc2 	bl	8000d88 <sbrk_aligned>
 8000e04:	1c43      	adds	r3, r0, #1
 8000e06:	4604      	mov	r4, r0
 8000e08:	d14d      	bne.n	8000ea6 <_malloc_r+0xde>
 8000e0a:	6834      	ldr	r4, [r6, #0]
 8000e0c:	4626      	mov	r6, r4
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d140      	bne.n	8000e94 <_malloc_r+0xcc>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	4631      	mov	r1, r6
 8000e16:	4638      	mov	r0, r7
 8000e18:	eb04 0803 	add.w	r8, r4, r3
 8000e1c:	f000 fb34 	bl	8001488 <_sbrk_r>
 8000e20:	4580      	cmp	r8, r0
 8000e22:	d13a      	bne.n	8000e9a <_malloc_r+0xd2>
 8000e24:	6821      	ldr	r1, [r4, #0]
 8000e26:	3503      	adds	r5, #3
 8000e28:	1a6d      	subs	r5, r5, r1
 8000e2a:	f025 0503 	bic.w	r5, r5, #3
 8000e2e:	3508      	adds	r5, #8
 8000e30:	2d0c      	cmp	r5, #12
 8000e32:	bf38      	it	cc
 8000e34:	250c      	movcc	r5, #12
 8000e36:	4629      	mov	r1, r5
 8000e38:	4638      	mov	r0, r7
 8000e3a:	f7ff ffa5 	bl	8000d88 <sbrk_aligned>
 8000e3e:	3001      	adds	r0, #1
 8000e40:	d02b      	beq.n	8000e9a <_malloc_r+0xd2>
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	442b      	add	r3, r5
 8000e46:	6023      	str	r3, [r4, #0]
 8000e48:	e00e      	b.n	8000e68 <_malloc_r+0xa0>
 8000e4a:	6822      	ldr	r2, [r4, #0]
 8000e4c:	1b52      	subs	r2, r2, r5
 8000e4e:	d41e      	bmi.n	8000e8e <_malloc_r+0xc6>
 8000e50:	2a0b      	cmp	r2, #11
 8000e52:	d916      	bls.n	8000e82 <_malloc_r+0xba>
 8000e54:	1961      	adds	r1, r4, r5
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	6025      	str	r5, [r4, #0]
 8000e5a:	bf18      	it	ne
 8000e5c:	6059      	strne	r1, [r3, #4]
 8000e5e:	6863      	ldr	r3, [r4, #4]
 8000e60:	bf08      	it	eq
 8000e62:	6031      	streq	r1, [r6, #0]
 8000e64:	5162      	str	r2, [r4, r5]
 8000e66:	604b      	str	r3, [r1, #4]
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f104 060b 	add.w	r6, r4, #11
 8000e6e:	f000 fbbb 	bl	80015e8 <__malloc_unlock>
 8000e72:	f026 0607 	bic.w	r6, r6, #7
 8000e76:	1d23      	adds	r3, r4, #4
 8000e78:	1af2      	subs	r2, r6, r3
 8000e7a:	d0b6      	beq.n	8000dea <_malloc_r+0x22>
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	50a3      	str	r3, [r4, r2]
 8000e80:	e7b3      	b.n	8000dea <_malloc_r+0x22>
 8000e82:	6862      	ldr	r2, [r4, #4]
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	bf0c      	ite	eq
 8000e88:	6032      	streq	r2, [r6, #0]
 8000e8a:	605a      	strne	r2, [r3, #4]
 8000e8c:	e7ec      	b.n	8000e68 <_malloc_r+0xa0>
 8000e8e:	4623      	mov	r3, r4
 8000e90:	6864      	ldr	r4, [r4, #4]
 8000e92:	e7b2      	b.n	8000dfa <_malloc_r+0x32>
 8000e94:	4634      	mov	r4, r6
 8000e96:	6876      	ldr	r6, [r6, #4]
 8000e98:	e7b9      	b.n	8000e0e <_malloc_r+0x46>
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	f000 fba2 	bl	80015e8 <__malloc_unlock>
 8000ea4:	e7a1      	b.n	8000dea <_malloc_r+0x22>
 8000ea6:	6025      	str	r5, [r4, #0]
 8000ea8:	e7de      	b.n	8000e68 <_malloc_r+0xa0>
 8000eaa:	bf00      	nop
 8000eac:	20000088 	.word	0x20000088

08000eb0 <__sfputc_r>:
 8000eb0:	6893      	ldr	r3, [r2, #8]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	b410      	push	{r4}
 8000eb8:	6093      	str	r3, [r2, #8]
 8000eba:	da07      	bge.n	8000ecc <__sfputc_r+0x1c>
 8000ebc:	6994      	ldr	r4, [r2, #24]
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	db01      	blt.n	8000ec6 <__sfputc_r+0x16>
 8000ec2:	290a      	cmp	r1, #10
 8000ec4:	d102      	bne.n	8000ecc <__sfputc_r+0x1c>
 8000ec6:	bc10      	pop	{r4}
 8000ec8:	f7ff bc38 	b.w	800073c <__swbuf_r>
 8000ecc:	6813      	ldr	r3, [r2, #0]
 8000ece:	1c58      	adds	r0, r3, #1
 8000ed0:	6010      	str	r0, [r2, #0]
 8000ed2:	7019      	strb	r1, [r3, #0]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	bc10      	pop	{r4}
 8000ed8:	4770      	bx	lr

08000eda <__sfputs_r>:
 8000eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000edc:	4606      	mov	r6, r0
 8000ede:	460f      	mov	r7, r1
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	18d5      	adds	r5, r2, r3
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d101      	bne.n	8000eec <__sfputs_r+0x12>
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e007      	b.n	8000efc <__sfputs_r+0x22>
 8000eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ef0:	463a      	mov	r2, r7
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f7ff ffdc 	bl	8000eb0 <__sfputc_r>
 8000ef8:	1c43      	adds	r3, r0, #1
 8000efa:	d1f3      	bne.n	8000ee4 <__sfputs_r+0xa>
 8000efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f00 <_vfiprintf_r>:
 8000f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f04:	460d      	mov	r5, r1
 8000f06:	b09d      	sub	sp, #116	; 0x74
 8000f08:	4614      	mov	r4, r2
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	b118      	cbz	r0, 8000f18 <_vfiprintf_r+0x18>
 8000f10:	6983      	ldr	r3, [r0, #24]
 8000f12:	b90b      	cbnz	r3, 8000f18 <_vfiprintf_r+0x18>
 8000f14:	f7ff fde8 	bl	8000ae8 <__sinit>
 8000f18:	4b89      	ldr	r3, [pc, #548]	; (8001140 <_vfiprintf_r+0x240>)
 8000f1a:	429d      	cmp	r5, r3
 8000f1c:	d11b      	bne.n	8000f56 <_vfiprintf_r+0x56>
 8000f1e:	6875      	ldr	r5, [r6, #4]
 8000f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f22:	07d9      	lsls	r1, r3, #31
 8000f24:	d405      	bmi.n	8000f32 <_vfiprintf_r+0x32>
 8000f26:	89ab      	ldrh	r3, [r5, #12]
 8000f28:	059a      	lsls	r2, r3, #22
 8000f2a:	d402      	bmi.n	8000f32 <_vfiprintf_r+0x32>
 8000f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f2e:	f7ff fe79 	bl	8000c24 <__retarget_lock_acquire_recursive>
 8000f32:	89ab      	ldrh	r3, [r5, #12]
 8000f34:	071b      	lsls	r3, r3, #28
 8000f36:	d501      	bpl.n	8000f3c <_vfiprintf_r+0x3c>
 8000f38:	692b      	ldr	r3, [r5, #16]
 8000f3a:	b9eb      	cbnz	r3, 8000f78 <_vfiprintf_r+0x78>
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4630      	mov	r0, r6
 8000f40:	f7ff fc4e 	bl	80007e0 <__swsetup_r>
 8000f44:	b1c0      	cbz	r0, 8000f78 <_vfiprintf_r+0x78>
 8000f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f48:	07dc      	lsls	r4, r3, #31
 8000f4a:	d50e      	bpl.n	8000f6a <_vfiprintf_r+0x6a>
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	b01d      	add	sp, #116	; 0x74
 8000f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <_vfiprintf_r+0x244>)
 8000f58:	429d      	cmp	r5, r3
 8000f5a:	d101      	bne.n	8000f60 <_vfiprintf_r+0x60>
 8000f5c:	68b5      	ldr	r5, [r6, #8]
 8000f5e:	e7df      	b.n	8000f20 <_vfiprintf_r+0x20>
 8000f60:	4b79      	ldr	r3, [pc, #484]	; (8001148 <_vfiprintf_r+0x248>)
 8000f62:	429d      	cmp	r5, r3
 8000f64:	bf08      	it	eq
 8000f66:	68f5      	ldreq	r5, [r6, #12]
 8000f68:	e7da      	b.n	8000f20 <_vfiprintf_r+0x20>
 8000f6a:	89ab      	ldrh	r3, [r5, #12]
 8000f6c:	0598      	lsls	r0, r3, #22
 8000f6e:	d4ed      	bmi.n	8000f4c <_vfiprintf_r+0x4c>
 8000f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f72:	f7ff fe58 	bl	8000c26 <__retarget_lock_release_recursive>
 8000f76:	e7e9      	b.n	8000f4c <_vfiprintf_r+0x4c>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f86:	2330      	movs	r3, #48	; 0x30
 8000f88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800114c <_vfiprintf_r+0x24c>
 8000f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f90:	f04f 0901 	mov.w	r9, #1
 8000f94:	4623      	mov	r3, r4
 8000f96:	469a      	mov	sl, r3
 8000f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f9c:	b10a      	cbz	r2, 8000fa2 <_vfiprintf_r+0xa2>
 8000f9e:	2a25      	cmp	r2, #37	; 0x25
 8000fa0:	d1f9      	bne.n	8000f96 <_vfiprintf_r+0x96>
 8000fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8000fa6:	d00b      	beq.n	8000fc0 <_vfiprintf_r+0xc0>
 8000fa8:	465b      	mov	r3, fp
 8000faa:	4622      	mov	r2, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f7ff ff93 	bl	8000eda <__sfputs_r>
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	f000 80aa 	beq.w	800110e <_vfiprintf_r+0x20e>
 8000fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fbc:	445a      	add	r2, fp
 8000fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8000fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80a2 	beq.w	800110e <_vfiprintf_r+0x20e>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fd4:	f10a 0a01 	add.w	sl, sl, #1
 8000fd8:	9304      	str	r3, [sp, #16]
 8000fda:	9307      	str	r3, [sp, #28]
 8000fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8000fe2:	4654      	mov	r4, sl
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fea:	4858      	ldr	r0, [pc, #352]	; (800114c <_vfiprintf_r+0x24c>)
 8000fec:	f7ff f900 	bl	80001f0 <memchr>
 8000ff0:	9a04      	ldr	r2, [sp, #16]
 8000ff2:	b9d8      	cbnz	r0, 800102c <_vfiprintf_r+0x12c>
 8000ff4:	06d1      	lsls	r1, r2, #27
 8000ff6:	bf44      	itt	mi
 8000ff8:	2320      	movmi	r3, #32
 8000ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ffe:	0713      	lsls	r3, r2, #28
 8001000:	bf44      	itt	mi
 8001002:	232b      	movmi	r3, #43	; 0x2b
 8001004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001008:	f89a 3000 	ldrb.w	r3, [sl]
 800100c:	2b2a      	cmp	r3, #42	; 0x2a
 800100e:	d015      	beq.n	800103c <_vfiprintf_r+0x13c>
 8001010:	9a07      	ldr	r2, [sp, #28]
 8001012:	4654      	mov	r4, sl
 8001014:	2000      	movs	r0, #0
 8001016:	f04f 0c0a 	mov.w	ip, #10
 800101a:	4621      	mov	r1, r4
 800101c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001020:	3b30      	subs	r3, #48	; 0x30
 8001022:	2b09      	cmp	r3, #9
 8001024:	d94e      	bls.n	80010c4 <_vfiprintf_r+0x1c4>
 8001026:	b1b0      	cbz	r0, 8001056 <_vfiprintf_r+0x156>
 8001028:	9207      	str	r2, [sp, #28]
 800102a:	e014      	b.n	8001056 <_vfiprintf_r+0x156>
 800102c:	eba0 0308 	sub.w	r3, r0, r8
 8001030:	fa09 f303 	lsl.w	r3, r9, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	46a2      	mov	sl, r4
 800103a:	e7d2      	b.n	8000fe2 <_vfiprintf_r+0xe2>
 800103c:	9b03      	ldr	r3, [sp, #12]
 800103e:	1d19      	adds	r1, r3, #4
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	9103      	str	r1, [sp, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	bfbb      	ittet	lt
 8001048:	425b      	neglt	r3, r3
 800104a:	f042 0202 	orrlt.w	r2, r2, #2
 800104e:	9307      	strge	r3, [sp, #28]
 8001050:	9307      	strlt	r3, [sp, #28]
 8001052:	bfb8      	it	lt
 8001054:	9204      	strlt	r2, [sp, #16]
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	2b2e      	cmp	r3, #46	; 0x2e
 800105a:	d10c      	bne.n	8001076 <_vfiprintf_r+0x176>
 800105c:	7863      	ldrb	r3, [r4, #1]
 800105e:	2b2a      	cmp	r3, #42	; 0x2a
 8001060:	d135      	bne.n	80010ce <_vfiprintf_r+0x1ce>
 8001062:	9b03      	ldr	r3, [sp, #12]
 8001064:	1d1a      	adds	r2, r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9203      	str	r2, [sp, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bfb8      	it	lt
 800106e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001072:	3402      	adds	r4, #2
 8001074:	9305      	str	r3, [sp, #20]
 8001076:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001150 <_vfiprintf_r+0x250>
 800107a:	7821      	ldrb	r1, [r4, #0]
 800107c:	2203      	movs	r2, #3
 800107e:	4650      	mov	r0, sl
 8001080:	f7ff f8b6 	bl	80001f0 <memchr>
 8001084:	b140      	cbz	r0, 8001098 <_vfiprintf_r+0x198>
 8001086:	2340      	movs	r3, #64	; 0x40
 8001088:	eba0 000a 	sub.w	r0, r0, sl
 800108c:	fa03 f000 	lsl.w	r0, r3, r0
 8001090:	9b04      	ldr	r3, [sp, #16]
 8001092:	4303      	orrs	r3, r0
 8001094:	3401      	adds	r4, #1
 8001096:	9304      	str	r3, [sp, #16]
 8001098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800109c:	482d      	ldr	r0, [pc, #180]	; (8001154 <_vfiprintf_r+0x254>)
 800109e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010a2:	2206      	movs	r2, #6
 80010a4:	f7ff f8a4 	bl	80001f0 <memchr>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d03f      	beq.n	800112c <_vfiprintf_r+0x22c>
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <_vfiprintf_r+0x258>)
 80010ae:	bb1b      	cbnz	r3, 80010f8 <_vfiprintf_r+0x1f8>
 80010b0:	9b03      	ldr	r3, [sp, #12]
 80010b2:	3307      	adds	r3, #7
 80010b4:	f023 0307 	bic.w	r3, r3, #7
 80010b8:	3308      	adds	r3, #8
 80010ba:	9303      	str	r3, [sp, #12]
 80010bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010be:	443b      	add	r3, r7
 80010c0:	9309      	str	r3, [sp, #36]	; 0x24
 80010c2:	e767      	b.n	8000f94 <_vfiprintf_r+0x94>
 80010c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80010c8:	460c      	mov	r4, r1
 80010ca:	2001      	movs	r0, #1
 80010cc:	e7a5      	b.n	800101a <_vfiprintf_r+0x11a>
 80010ce:	2300      	movs	r3, #0
 80010d0:	3401      	adds	r4, #1
 80010d2:	9305      	str	r3, [sp, #20]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 0c0a 	mov.w	ip, #10
 80010da:	4620      	mov	r0, r4
 80010dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010e0:	3a30      	subs	r2, #48	; 0x30
 80010e2:	2a09      	cmp	r2, #9
 80010e4:	d903      	bls.n	80010ee <_vfiprintf_r+0x1ee>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0c5      	beq.n	8001076 <_vfiprintf_r+0x176>
 80010ea:	9105      	str	r1, [sp, #20]
 80010ec:	e7c3      	b.n	8001076 <_vfiprintf_r+0x176>
 80010ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80010f2:	4604      	mov	r4, r0
 80010f4:	2301      	movs	r3, #1
 80010f6:	e7f0      	b.n	80010da <_vfiprintf_r+0x1da>
 80010f8:	ab03      	add	r3, sp, #12
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	462a      	mov	r2, r5
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <_vfiprintf_r+0x25c>)
 8001100:	a904      	add	r1, sp, #16
 8001102:	4630      	mov	r0, r6
 8001104:	f3af 8000 	nop.w
 8001108:	4607      	mov	r7, r0
 800110a:	1c78      	adds	r0, r7, #1
 800110c:	d1d6      	bne.n	80010bc <_vfiprintf_r+0x1bc>
 800110e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001110:	07d9      	lsls	r1, r3, #31
 8001112:	d405      	bmi.n	8001120 <_vfiprintf_r+0x220>
 8001114:	89ab      	ldrh	r3, [r5, #12]
 8001116:	059a      	lsls	r2, r3, #22
 8001118:	d402      	bmi.n	8001120 <_vfiprintf_r+0x220>
 800111a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800111c:	f7ff fd83 	bl	8000c26 <__retarget_lock_release_recursive>
 8001120:	89ab      	ldrh	r3, [r5, #12]
 8001122:	065b      	lsls	r3, r3, #25
 8001124:	f53f af12 	bmi.w	8000f4c <_vfiprintf_r+0x4c>
 8001128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800112a:	e711      	b.n	8000f50 <_vfiprintf_r+0x50>
 800112c:	ab03      	add	r3, sp, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	462a      	mov	r2, r5
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <_vfiprintf_r+0x25c>)
 8001134:	a904      	add	r1, sp, #16
 8001136:	4630      	mov	r0, r6
 8001138:	f000 f880 	bl	800123c <_printf_i>
 800113c:	e7e4      	b.n	8001108 <_vfiprintf_r+0x208>
 800113e:	bf00      	nop
 8001140:	08001710 	.word	0x08001710
 8001144:	08001730 	.word	0x08001730
 8001148:	080016f0 	.word	0x080016f0
 800114c:	08001750 	.word	0x08001750
 8001150:	08001756 	.word	0x08001756
 8001154:	0800175a 	.word	0x0800175a
 8001158:	00000000 	.word	0x00000000
 800115c:	08000edb 	.word	0x08000edb

08001160 <_printf_common>:
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	4616      	mov	r6, r2
 8001166:	4699      	mov	r9, r3
 8001168:	688a      	ldr	r2, [r1, #8]
 800116a:	690b      	ldr	r3, [r1, #16]
 800116c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001170:	4293      	cmp	r3, r2
 8001172:	bfb8      	it	lt
 8001174:	4613      	movlt	r3, r2
 8001176:	6033      	str	r3, [r6, #0]
 8001178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800117c:	4607      	mov	r7, r0
 800117e:	460c      	mov	r4, r1
 8001180:	b10a      	cbz	r2, 8001186 <_printf_common+0x26>
 8001182:	3301      	adds	r3, #1
 8001184:	6033      	str	r3, [r6, #0]
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	0699      	lsls	r1, r3, #26
 800118a:	bf42      	ittt	mi
 800118c:	6833      	ldrmi	r3, [r6, #0]
 800118e:	3302      	addmi	r3, #2
 8001190:	6033      	strmi	r3, [r6, #0]
 8001192:	6825      	ldr	r5, [r4, #0]
 8001194:	f015 0506 	ands.w	r5, r5, #6
 8001198:	d106      	bne.n	80011a8 <_printf_common+0x48>
 800119a:	f104 0a19 	add.w	sl, r4, #25
 800119e:	68e3      	ldr	r3, [r4, #12]
 80011a0:	6832      	ldr	r2, [r6, #0]
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	dc26      	bgt.n	80011f6 <_printf_common+0x96>
 80011a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011ac:	1e13      	subs	r3, r2, #0
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	bf18      	it	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	0692      	lsls	r2, r2, #26
 80011b6:	d42b      	bmi.n	8001210 <_printf_common+0xb0>
 80011b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011bc:	4649      	mov	r1, r9
 80011be:	4638      	mov	r0, r7
 80011c0:	47c0      	blx	r8
 80011c2:	3001      	adds	r0, #1
 80011c4:	d01e      	beq.n	8001204 <_printf_common+0xa4>
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	68e5      	ldr	r5, [r4, #12]
 80011ca:	6832      	ldr	r2, [r6, #0]
 80011cc:	f003 0306 	and.w	r3, r3, #6
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	bf08      	it	eq
 80011d4:	1aad      	subeq	r5, r5, r2
 80011d6:	68a3      	ldr	r3, [r4, #8]
 80011d8:	6922      	ldr	r2, [r4, #16]
 80011da:	bf0c      	ite	eq
 80011dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011e0:	2500      	movne	r5, #0
 80011e2:	4293      	cmp	r3, r2
 80011e4:	bfc4      	itt	gt
 80011e6:	1a9b      	subgt	r3, r3, r2
 80011e8:	18ed      	addgt	r5, r5, r3
 80011ea:	2600      	movs	r6, #0
 80011ec:	341a      	adds	r4, #26
 80011ee:	42b5      	cmp	r5, r6
 80011f0:	d11a      	bne.n	8001228 <_printf_common+0xc8>
 80011f2:	2000      	movs	r0, #0
 80011f4:	e008      	b.n	8001208 <_printf_common+0xa8>
 80011f6:	2301      	movs	r3, #1
 80011f8:	4652      	mov	r2, sl
 80011fa:	4649      	mov	r1, r9
 80011fc:	4638      	mov	r0, r7
 80011fe:	47c0      	blx	r8
 8001200:	3001      	adds	r0, #1
 8001202:	d103      	bne.n	800120c <_printf_common+0xac>
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120c:	3501      	adds	r5, #1
 800120e:	e7c6      	b.n	800119e <_printf_common+0x3e>
 8001210:	18e1      	adds	r1, r4, r3
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	2030      	movs	r0, #48	; 0x30
 8001216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800121a:	4422      	add	r2, r4
 800121c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001224:	3302      	adds	r3, #2
 8001226:	e7c7      	b.n	80011b8 <_printf_common+0x58>
 8001228:	2301      	movs	r3, #1
 800122a:	4622      	mov	r2, r4
 800122c:	4649      	mov	r1, r9
 800122e:	4638      	mov	r0, r7
 8001230:	47c0      	blx	r8
 8001232:	3001      	adds	r0, #1
 8001234:	d0e6      	beq.n	8001204 <_printf_common+0xa4>
 8001236:	3601      	adds	r6, #1
 8001238:	e7d9      	b.n	80011ee <_printf_common+0x8e>
	...

0800123c <_printf_i>:
 800123c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	7e0f      	ldrb	r7, [r1, #24]
 8001242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001244:	2f78      	cmp	r7, #120	; 0x78
 8001246:	4691      	mov	r9, r2
 8001248:	4680      	mov	r8, r0
 800124a:	460c      	mov	r4, r1
 800124c:	469a      	mov	sl, r3
 800124e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001252:	d807      	bhi.n	8001264 <_printf_i+0x28>
 8001254:	2f62      	cmp	r7, #98	; 0x62
 8001256:	d80a      	bhi.n	800126e <_printf_i+0x32>
 8001258:	2f00      	cmp	r7, #0
 800125a:	f000 80d8 	beq.w	800140e <_printf_i+0x1d2>
 800125e:	2f58      	cmp	r7, #88	; 0x58
 8001260:	f000 80a3 	beq.w	80013aa <_printf_i+0x16e>
 8001264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800126c:	e03a      	b.n	80012e4 <_printf_i+0xa8>
 800126e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001272:	2b15      	cmp	r3, #21
 8001274:	d8f6      	bhi.n	8001264 <_printf_i+0x28>
 8001276:	a101      	add	r1, pc, #4	; (adr r1, 800127c <_printf_i+0x40>)
 8001278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800127c:	080012d5 	.word	0x080012d5
 8001280:	080012e9 	.word	0x080012e9
 8001284:	08001265 	.word	0x08001265
 8001288:	08001265 	.word	0x08001265
 800128c:	08001265 	.word	0x08001265
 8001290:	08001265 	.word	0x08001265
 8001294:	080012e9 	.word	0x080012e9
 8001298:	08001265 	.word	0x08001265
 800129c:	08001265 	.word	0x08001265
 80012a0:	08001265 	.word	0x08001265
 80012a4:	08001265 	.word	0x08001265
 80012a8:	080013f5 	.word	0x080013f5
 80012ac:	08001319 	.word	0x08001319
 80012b0:	080013d7 	.word	0x080013d7
 80012b4:	08001265 	.word	0x08001265
 80012b8:	08001265 	.word	0x08001265
 80012bc:	08001417 	.word	0x08001417
 80012c0:	08001265 	.word	0x08001265
 80012c4:	08001319 	.word	0x08001319
 80012c8:	08001265 	.word	0x08001265
 80012cc:	08001265 	.word	0x08001265
 80012d0:	080013df 	.word	0x080013df
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	602a      	str	r2, [r5, #0]
 80012dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0a3      	b.n	8001430 <_printf_i+0x1f4>
 80012e8:	6820      	ldr	r0, [r4, #0]
 80012ea:	6829      	ldr	r1, [r5, #0]
 80012ec:	0606      	lsls	r6, r0, #24
 80012ee:	f101 0304 	add.w	r3, r1, #4
 80012f2:	d50a      	bpl.n	800130a <_printf_i+0xce>
 80012f4:	680e      	ldr	r6, [r1, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	da03      	bge.n	8001304 <_printf_i+0xc8>
 80012fc:	232d      	movs	r3, #45	; 0x2d
 80012fe:	4276      	negs	r6, r6
 8001300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001304:	485e      	ldr	r0, [pc, #376]	; (8001480 <_printf_i+0x244>)
 8001306:	230a      	movs	r3, #10
 8001308:	e019      	b.n	800133e <_printf_i+0x102>
 800130a:	680e      	ldr	r6, [r1, #0]
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001312:	bf18      	it	ne
 8001314:	b236      	sxthne	r6, r6
 8001316:	e7ef      	b.n	80012f8 <_printf_i+0xbc>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	6820      	ldr	r0, [r4, #0]
 800131c:	1d19      	adds	r1, r3, #4
 800131e:	6029      	str	r1, [r5, #0]
 8001320:	0601      	lsls	r1, r0, #24
 8001322:	d501      	bpl.n	8001328 <_printf_i+0xec>
 8001324:	681e      	ldr	r6, [r3, #0]
 8001326:	e002      	b.n	800132e <_printf_i+0xf2>
 8001328:	0646      	lsls	r6, r0, #25
 800132a:	d5fb      	bpl.n	8001324 <_printf_i+0xe8>
 800132c:	881e      	ldrh	r6, [r3, #0]
 800132e:	4854      	ldr	r0, [pc, #336]	; (8001480 <_printf_i+0x244>)
 8001330:	2f6f      	cmp	r7, #111	; 0x6f
 8001332:	bf0c      	ite	eq
 8001334:	2308      	moveq	r3, #8
 8001336:	230a      	movne	r3, #10
 8001338:	2100      	movs	r1, #0
 800133a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800133e:	6865      	ldr	r5, [r4, #4]
 8001340:	60a5      	str	r5, [r4, #8]
 8001342:	2d00      	cmp	r5, #0
 8001344:	bfa2      	ittt	ge
 8001346:	6821      	ldrge	r1, [r4, #0]
 8001348:	f021 0104 	bicge.w	r1, r1, #4
 800134c:	6021      	strge	r1, [r4, #0]
 800134e:	b90e      	cbnz	r6, 8001354 <_printf_i+0x118>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d04d      	beq.n	80013f0 <_printf_i+0x1b4>
 8001354:	4615      	mov	r5, r2
 8001356:	fbb6 f1f3 	udiv	r1, r6, r3
 800135a:	fb03 6711 	mls	r7, r3, r1, r6
 800135e:	5dc7      	ldrb	r7, [r0, r7]
 8001360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001364:	4637      	mov	r7, r6
 8001366:	42bb      	cmp	r3, r7
 8001368:	460e      	mov	r6, r1
 800136a:	d9f4      	bls.n	8001356 <_printf_i+0x11a>
 800136c:	2b08      	cmp	r3, #8
 800136e:	d10b      	bne.n	8001388 <_printf_i+0x14c>
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	07de      	lsls	r6, r3, #31
 8001374:	d508      	bpl.n	8001388 <_printf_i+0x14c>
 8001376:	6923      	ldr	r3, [r4, #16]
 8001378:	6861      	ldr	r1, [r4, #4]
 800137a:	4299      	cmp	r1, r3
 800137c:	bfde      	ittt	le
 800137e:	2330      	movle	r3, #48	; 0x30
 8001380:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001384:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001388:	1b52      	subs	r2, r2, r5
 800138a:	6122      	str	r2, [r4, #16]
 800138c:	f8cd a000 	str.w	sl, [sp]
 8001390:	464b      	mov	r3, r9
 8001392:	aa03      	add	r2, sp, #12
 8001394:	4621      	mov	r1, r4
 8001396:	4640      	mov	r0, r8
 8001398:	f7ff fee2 	bl	8001160 <_printf_common>
 800139c:	3001      	adds	r0, #1
 800139e:	d14c      	bne.n	800143a <_printf_i+0x1fe>
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	b004      	add	sp, #16
 80013a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013aa:	4835      	ldr	r0, [pc, #212]	; (8001480 <_printf_i+0x244>)
 80013ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80013b0:	6829      	ldr	r1, [r5, #0]
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80013b8:	6029      	str	r1, [r5, #0]
 80013ba:	061d      	lsls	r5, r3, #24
 80013bc:	d514      	bpl.n	80013e8 <_printf_i+0x1ac>
 80013be:	07df      	lsls	r7, r3, #31
 80013c0:	bf44      	itt	mi
 80013c2:	f043 0320 	orrmi.w	r3, r3, #32
 80013c6:	6023      	strmi	r3, [r4, #0]
 80013c8:	b91e      	cbnz	r6, 80013d2 <_printf_i+0x196>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	f023 0320 	bic.w	r3, r3, #32
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	2310      	movs	r3, #16
 80013d4:	e7b0      	b.n	8001338 <_printf_i+0xfc>
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6023      	str	r3, [r4, #0]
 80013de:	2378      	movs	r3, #120	; 0x78
 80013e0:	4828      	ldr	r0, [pc, #160]	; (8001484 <_printf_i+0x248>)
 80013e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80013e6:	e7e3      	b.n	80013b0 <_printf_i+0x174>
 80013e8:	0659      	lsls	r1, r3, #25
 80013ea:	bf48      	it	mi
 80013ec:	b2b6      	uxthmi	r6, r6
 80013ee:	e7e6      	b.n	80013be <_printf_i+0x182>
 80013f0:	4615      	mov	r5, r2
 80013f2:	e7bb      	b.n	800136c <_printf_i+0x130>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	6826      	ldr	r6, [r4, #0]
 80013f8:	6961      	ldr	r1, [r4, #20]
 80013fa:	1d18      	adds	r0, r3, #4
 80013fc:	6028      	str	r0, [r5, #0]
 80013fe:	0635      	lsls	r5, r6, #24
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	d501      	bpl.n	8001408 <_printf_i+0x1cc>
 8001404:	6019      	str	r1, [r3, #0]
 8001406:	e002      	b.n	800140e <_printf_i+0x1d2>
 8001408:	0670      	lsls	r0, r6, #25
 800140a:	d5fb      	bpl.n	8001404 <_printf_i+0x1c8>
 800140c:	8019      	strh	r1, [r3, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	6123      	str	r3, [r4, #16]
 8001412:	4615      	mov	r5, r2
 8001414:	e7ba      	b.n	800138c <_printf_i+0x150>
 8001416:	682b      	ldr	r3, [r5, #0]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	602a      	str	r2, [r5, #0]
 800141c:	681d      	ldr	r5, [r3, #0]
 800141e:	6862      	ldr	r2, [r4, #4]
 8001420:	2100      	movs	r1, #0
 8001422:	4628      	mov	r0, r5
 8001424:	f7fe fee4 	bl	80001f0 <memchr>
 8001428:	b108      	cbz	r0, 800142e <_printf_i+0x1f2>
 800142a:	1b40      	subs	r0, r0, r5
 800142c:	6060      	str	r0, [r4, #4]
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	6123      	str	r3, [r4, #16]
 8001432:	2300      	movs	r3, #0
 8001434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001438:	e7a8      	b.n	800138c <_printf_i+0x150>
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	462a      	mov	r2, r5
 800143e:	4649      	mov	r1, r9
 8001440:	4640      	mov	r0, r8
 8001442:	47d0      	blx	sl
 8001444:	3001      	adds	r0, #1
 8001446:	d0ab      	beq.n	80013a0 <_printf_i+0x164>
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	079b      	lsls	r3, r3, #30
 800144c:	d413      	bmi.n	8001476 <_printf_i+0x23a>
 800144e:	68e0      	ldr	r0, [r4, #12]
 8001450:	9b03      	ldr	r3, [sp, #12]
 8001452:	4298      	cmp	r0, r3
 8001454:	bfb8      	it	lt
 8001456:	4618      	movlt	r0, r3
 8001458:	e7a4      	b.n	80013a4 <_printf_i+0x168>
 800145a:	2301      	movs	r3, #1
 800145c:	4632      	mov	r2, r6
 800145e:	4649      	mov	r1, r9
 8001460:	4640      	mov	r0, r8
 8001462:	47d0      	blx	sl
 8001464:	3001      	adds	r0, #1
 8001466:	d09b      	beq.n	80013a0 <_printf_i+0x164>
 8001468:	3501      	adds	r5, #1
 800146a:	68e3      	ldr	r3, [r4, #12]
 800146c:	9903      	ldr	r1, [sp, #12]
 800146e:	1a5b      	subs	r3, r3, r1
 8001470:	42ab      	cmp	r3, r5
 8001472:	dcf2      	bgt.n	800145a <_printf_i+0x21e>
 8001474:	e7eb      	b.n	800144e <_printf_i+0x212>
 8001476:	2500      	movs	r5, #0
 8001478:	f104 0619 	add.w	r6, r4, #25
 800147c:	e7f5      	b.n	800146a <_printf_i+0x22e>
 800147e:	bf00      	nop
 8001480:	08001761 	.word	0x08001761
 8001484:	08001772 	.word	0x08001772

08001488 <_sbrk_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d06      	ldr	r5, [pc, #24]	; (80014a4 <_sbrk_r+0x1c>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	f7ff f832 	bl	80004fc <_sbrk>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	d102      	bne.n	80014a2 <_sbrk_r+0x1a>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	b103      	cbz	r3, 80014a2 <_sbrk_r+0x1a>
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	20000090 	.word	0x20000090

080014a8 <__sread>:
 80014a8:	b510      	push	{r4, lr}
 80014aa:	460c      	mov	r4, r1
 80014ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b0:	f000 f8a0 	bl	80015f4 <_read_r>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	bfab      	itete	ge
 80014b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80014ba:	89a3      	ldrhlt	r3, [r4, #12]
 80014bc:	181b      	addge	r3, r3, r0
 80014be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80014c2:	bfac      	ite	ge
 80014c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80014c6:	81a3      	strhlt	r3, [r4, #12]
 80014c8:	bd10      	pop	{r4, pc}

080014ca <__swrite>:
 80014ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ce:	461f      	mov	r7, r3
 80014d0:	898b      	ldrh	r3, [r1, #12]
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	4605      	mov	r5, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4616      	mov	r6, r2
 80014da:	d505      	bpl.n	80014e8 <__swrite+0x1e>
 80014dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014e0:	2302      	movs	r3, #2
 80014e2:	2200      	movs	r2, #0
 80014e4:	f000 f868 	bl	80015b8 <_lseek_r>
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	4632      	mov	r2, r6
 80014f6:	463b      	mov	r3, r7
 80014f8:	4628      	mov	r0, r5
 80014fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014fe:	f000 b817 	b.w	8001530 <_write_r>

08001502 <__sseek>:
 8001502:	b510      	push	{r4, lr}
 8001504:	460c      	mov	r4, r1
 8001506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800150a:	f000 f855 	bl	80015b8 <_lseek_r>
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	bf15      	itete	ne
 8001514:	6560      	strne	r0, [r4, #84]	; 0x54
 8001516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800151a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800151e:	81a3      	strheq	r3, [r4, #12]
 8001520:	bf18      	it	ne
 8001522:	81a3      	strhne	r3, [r4, #12]
 8001524:	bd10      	pop	{r4, pc}

08001526 <__sclose>:
 8001526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800152a:	f000 b813 	b.w	8001554 <_close_r>
	...

08001530 <_write_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d07      	ldr	r5, [pc, #28]	; (8001550 <_write_r+0x20>)
 8001534:	4604      	mov	r4, r0
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	2200      	movs	r2, #0
 800153c:	602a      	str	r2, [r5, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	f7fe ff8f 	bl	8000462 <_write>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_write_r+0x1e>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_write_r+0x1e>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	20000090 	.word	0x20000090

08001554 <_close_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4d06      	ldr	r5, [pc, #24]	; (8001570 <_close_r+0x1c>)
 8001558:	2300      	movs	r3, #0
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	f7fe ff9b 	bl	800049a <_close>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_close_r+0x1a>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_close_r+0x1a>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	20000090 	.word	0x20000090

08001574 <_fstat_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d07      	ldr	r5, [pc, #28]	; (8001594 <_fstat_r+0x20>)
 8001578:	2300      	movs	r3, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	602b      	str	r3, [r5, #0]
 8001582:	f7fe ff95 	bl	80004b0 <_fstat>
 8001586:	1c43      	adds	r3, r0, #1
 8001588:	d102      	bne.n	8001590 <_fstat_r+0x1c>
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	b103      	cbz	r3, 8001590 <_fstat_r+0x1c>
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	bd38      	pop	{r3, r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	20000090 	.word	0x20000090

08001598 <_isatty_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4d06      	ldr	r5, [pc, #24]	; (80015b4 <_isatty_r+0x1c>)
 800159c:	2300      	movs	r3, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	602b      	str	r3, [r5, #0]
 80015a4:	f7fe ff93 	bl	80004ce <_isatty>
 80015a8:	1c43      	adds	r3, r0, #1
 80015aa:	d102      	bne.n	80015b2 <_isatty_r+0x1a>
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	b103      	cbz	r3, 80015b2 <_isatty_r+0x1a>
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	20000090 	.word	0x20000090

080015b8 <_lseek_r>:
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4d07      	ldr	r5, [pc, #28]	; (80015d8 <_lseek_r+0x20>)
 80015bc:	4604      	mov	r4, r0
 80015be:	4608      	mov	r0, r1
 80015c0:	4611      	mov	r1, r2
 80015c2:	2200      	movs	r2, #0
 80015c4:	602a      	str	r2, [r5, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f7fe ff8b 	bl	80004e2 <_lseek>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_lseek_r+0x1e>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_lseek_r+0x1e>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	20000090 	.word	0x20000090

080015dc <__malloc_lock>:
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <__malloc_lock+0x8>)
 80015de:	f7ff bb21 	b.w	8000c24 <__retarget_lock_acquire_recursive>
 80015e2:	bf00      	nop
 80015e4:	20000084 	.word	0x20000084

080015e8 <__malloc_unlock>:
 80015e8:	4801      	ldr	r0, [pc, #4]	; (80015f0 <__malloc_unlock+0x8>)
 80015ea:	f7ff bb1c 	b.w	8000c26 <__retarget_lock_release_recursive>
 80015ee:	bf00      	nop
 80015f0:	20000084 	.word	0x20000084

080015f4 <_read_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d07      	ldr	r5, [pc, #28]	; (8001614 <_read_r+0x20>)
 80015f8:	4604      	mov	r4, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	4611      	mov	r1, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	602a      	str	r2, [r5, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	f7fe ff10 	bl	8000428 <_read>
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	d102      	bne.n	8001612 <_read_r+0x1e>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	b103      	cbz	r3, 8001612 <_read_r+0x1e>
 8001610:	6023      	str	r3, [r4, #0]
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	20000090 	.word	0x20000090

08001618 <_init>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr

08001624 <_fini>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr
